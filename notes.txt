================================= 1. Basic ==============================================
// Basic
# 1. рдирдпрд╛ folder рдмрдирд╛рдУ рдФрд░ рдЙрд╕рдореЗрдВ рдЬрд╛рдУ
mkdir myproject
cd myproject

# 2. Git repo initialize рдХрд░реЛ
git init

# 3. рдПрдХ рдирдИ file рдмрдирд╛рдУ (example)
echo "Hello Git" > hello.txt

# 4. Repo рдХреА рд╕реНрдерд┐рддрд┐ check рдХрд░реЛ
git status

# 5. File рдХреЛ staging area рдореЗрдВ рдбрд╛рд▓реЛ
git add hello.txt
# (рдпрд╛ рд╕рдм рдлрд╛рдЗрд▓реЗрдВ add рдХрд░рдиреА рд╣реЛрдВ рддреЛ: git add .)

# 6. First commit рдмрдирд╛рдУ
git commit -m "First commit: added hello.txt"

# 7. GitHub рдкрд░ рдирдИ repo рдмрдирд╛рдУ (manual step GitHub website рдкрд░)

# 8. Remote repo рд╕реЗ connect рдХрд░реЛ
git remote add origin https://github.com/username/myproject.git

# 9. Main branch set рдХрд░реЛ
git branch -M main

# 10. Code GitHub рдкрд░ push рдХрд░реЛ
git push -u origin main



================================= 2. Branch ==============================================
# 1. Branch list рджреЗрдЦрдирд╛
git branch

# 2. рдирдИ branch рдмрдирд╛рдирд╛
git branch feature1

# 3. рдЙрд╕ branch рдкрд░ switch рдХрд░рдирд╛
git checkout feature1

# (Shortcut: branch рдмрдирд╛рдирд╛ + switch рдХрд░рдирд╛ рдПрдХ рд╕рд╛рде)
git checkout -b feature2

# 4. рдлрд╛рдЗрд▓ add рдХрд░рдХреЗ commit рдХрд░рдирд╛ (branch рдореЗрдВ рдХрд╛рдо рдХрд░реЛ)
echo "This is feature work" > feature.txt
git add feature.txt
git commit -m "Added feature.txt in feature branch"

# 5. Branch рдХреЛ GitHub рдкрд░ push рдХрд░рдирд╛
git push -u origin feature1

# 6. рд╡рд╛рдкрд╕ main branch рдкрд░ рдЖрдирд╛
git checkout main

# 7. feature1 branch рдХреЛ main рдореЗрдВ merge рдХрд░рдирд╛
git merge feature1

# 7.1 Merge result рдХреЛ GitHub рдкрд░ push рдХрд░рдирд╛ (important)
git push origin main

# 8. Branch delete рдХрд░рдирд╛ (local)
git branch -d feature1

# 9. Branch delete рдХрд░рдирд╛ (remote/GitHub)
git push origin --delete feature1

ЁЯФ╣ 3. рдЕрдЧрд░ рджреЛрдиреЛрдВ рдЬрдЧрд╣ рд╕реЗ рд╣рдЯрд╛рдирд╛ рд╣реИ
рддреЛ рдкрд╣рд▓реЗ local delete рдХрд░реЛ рдФрд░ рдлрд┐рд░ remote delete:
git branch -d branch_name
git push origin --delete branch_name

====================================== Veri IMP ===============================
==================== (Untracked Files) VS (Modified Tracked Files) ============

## ЁЯФ╣ Case 1: **Untracked Files** (рдирдИ рдлрд╛рдЗрд▓реЗрдВ, `git add` рдпрд╛ `commit` рдирд╣реАрдВ рдХрд┐рдпрд╛)

* Git рдХреЛ рдЗрдирдХреА рдХреЛрдИ history рдирд╣реАрдВ рдкрддрд╛ред
* рдпреЗ рд╕рд┐рд░реНрдл рдЖрдкрдХреЗ working directory рдореЗрдВ рдкрдбрд╝реА рд╣реИрдВред
* рдЗрд╕рд▓рд┐рдП рдЖрдк рдЖрд╕рд╛рдиреА рд╕реЗ branch рдмрджрд▓ рд╕рдХрддреЗ рд╣реЛ (`git checkout branch_name`)ред
* Branch change рдХрд░рдиреЗ рд╕реЗ untracked files рд╡рд╣реАрдВ рд░рд╣ рдЬрд╛рддреА рд╣реИрдВ (рдХреНрдпреЛрдВрдХрд┐ рд╡реЛ рдХрд┐рд╕реА branch рд╕реЗ рдЬреБрдбрд╝реА рд╣реА рдирд╣реАрдВ рд╣реИрдВ)ред

ЁЯСЙ Example:

echo "hello" > new.txt   # untracked file
git checkout master      # allowed

## ЁЯФ╣ Case 2: **Modified Tracked Files** (рдлрд╛рдЗрд▓реЗрдВ рдЬреЛ рдкрд╣рд▓реЗ рд╕реЗ Git рдореЗрдВ рд╣реИрдВ, рдкрд░ рдЕрднреА рдмрджрд▓реА рдЧрдИ рд╣реИрдВ)
* Git рдХреЛ рдкрддрд╛ рд╣реИ рдпреЗ рдХрд┐рд╕ commit рд╕реЗ belong рдХрд░рддреА рд╣реИрдВред
* рдЕрдЧрд░ рдЖрдк branch рдмрджрд▓рддреЗ рд╣реЛ рдФрд░ рджреВрд╕рд░реА branch рдореЗрдВ рдЙрд╕реА file рдХрд╛ рдЕрд▓рдЧ version рд╣реИ тЖТ рддреЛ conflict/overwrite рд╣реЛ рд╕рдХрддрд╛ рд╣реИред
* рдЗрд╕реАрд▓рд┐рдП Git **allow рдирд╣реАрдВ рдХрд░рддрд╛** рдЬрдм рддрдХ:

  1. рдЖрдк changes commit рди рдХрд░ рджреЛ,
  2. рдпрд╛ stash рди рдХрд░ рджреЛ,
  3. рдпрд╛ discard рди рдХрд░ рджреЛред

-------------------------------- 2. stash ---------------------------------------------
# 1. рдХрд╛рдо рдХрд┐рдпрд╛ (file update рдХреА)
echo "update" >> notes.txt

# 2. Changes рдХреЛ stash рдХрд░реЛ (рд╕рд┐рд░реНрдл tracked files)
git stash

# 3. Untracked files рднреА stash рдХрд░рдиреА рд╣реЛрдВ
git stash -u

# 4. Untracked + Ignored files рднреА stash рдХрд░рдиреА рд╣реЛрдВ
git stash -a

# 5. Custom message рдХреЗ рд╕рд╛рде stash рдХрд░реЛ
git stash push -m "WIP: notes.txt update"

# 6. Stash list рджреЗрдЦреЛ
git stash list

# 7. рдХрд┐рд╕реА stash рдХрд╛ detail рджреЗрдЦреЛ (overview)
git stash show stash@{0}

# 8. рдХрд┐рд╕реА stash рдХрд╛ рдкреВрд░рд╛ diff рджреЗрдЦреЛ
git stash show -p stash@{0}

# 9. Latest stash рд╡рд╛рдкрд╕ рд▓рд╛рдУ (stash list рдореЗрдВ рд░рд╣реЗрдЧрд╛)
git stash apply

# 10. Specific stash рд╡рд╛рдкрд╕ рд▓рд╛рдУ
git stash apply stash@{2}

# 11. Latest stash рд╡рд╛рдкрд╕ рд▓рд╛рдУ + stash рд╣рдЯрд╛рдУ
git stash pop

# 12. Specific stash рд╡рд╛рдкрд╕ рд▓рд╛рдУ + stash рд╣рдЯрд╛рдУ
git stash pop stash@{1}

# 13. рдХрд┐рд╕реА рдПрдХ stash рдХреЛ рд╣рдЯрд╛рдУ
git stash drop stash@{0}

# 14. рд╕рд╛рд░реЗ stashes clear рдХрд░ рджреЛ
git stash clear

IMP for stash
Note:- 
1. git stash clear рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?
рдпреЗ рдЖрдкрдХреЗ рд╕рд╛рд░реЗ stashes delete рдХрд░ рджреЗрддрд╛ рд╣реИред
рдорддрд▓рдм рдЬреЛ рднреА changes рдЖрдкрдиреЗ stash рдХрд░рдХреЗ рд░рдЦреЗ рдереЗ, рд╡реЛ рдЕрдм Git рдореЗрдВ рдХрд╣реАрдВ save рдирд╣реАрдВ рд░рд╣реЗрдВрдЧреЗред
рдЕрдЧрд░ рдЖрдкрдиреЗ рдЙрдиреНрд╣реЗрдВ рдкрд╣рд▓реЗ apply/pop рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИ тЖТ рддреЛ рд╡реЛ changes рд╣рдореЗрд╢рд╛ рдХреЗ рд▓рд┐рдП рдЧрд╛рдпрдм рд╣реЛ рдЬрд╛рдПрдБрдЧреЗред

2. рдХрд┐рд╕реА рднреА branch рдореЗрдВ рдЬрд╛рдХрд░ рдЙрд╕реЗ apply рдпрд╛ pop рдХрд░ рд╕рдХрддреЗ рд╣реЛред
рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ Stash?
рдЬрдм рдЖрдк git stash рдЪрд▓рд╛рддреЗ рд╣реЛ, Git рдЖрдкрдХреЗ current working directory changes рдХреЛ рдПрдХ special рдЬрдЧрд╣ (.git/refs/stash) рдореЗрдВ save рдХрд░ рджреЗрддрд╛ рд╣реИред
рдпрд╣ stash рдХрд┐рд╕реА branch рд╕реЗ permanent рдЬреБрдбрд╝рд╛ рдирд╣реАрдВ рд╣реЛрддрд╛ред
рдЗрд╕рд▓рд┐рдП рдЖрдк рдХрд┐рд╕реА рднреА branch рдореЗрдВ рдЬрд╛рдХрд░ рдЙрд╕реЗ apply рдпрд╛ pop рдХрд░ рд╕рдХрддреЗ рд╣реЛред
