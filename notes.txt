================================= 1. Basic ==============================================
// Basic
# 1. рдирдпрд╛ folder рдмрдирд╛рдУ рдФрд░ рдЙрд╕рдореЗрдВ рдЬрд╛рдУ
mkdir myproject
cd myproject

# 2. Git repo initialize рдХрд░реЛ
git init

# 3. рдПрдХ рдирдИ file рдмрдирд╛рдУ (example)
echo "Hello Git" > hello.txt

# 4. Repo рдХреА рд╕реНрдерд┐рддрд┐ check рдХрд░реЛ
git status

# 5. File рдХреЛ staging area рдореЗрдВ рдбрд╛рд▓реЛ
git add hello.txt
# (рдпрд╛ рд╕рдм рдлрд╛рдЗрд▓реЗрдВ add рдХрд░рдиреА рд╣реЛрдВ рддреЛ: git add .)

# 6. First commit рдмрдирд╛рдУ
git commit -m "First commit: added hello.txt"

# 7. GitHub рдкрд░ рдирдИ repo рдмрдирд╛рдУ (manual step GitHub website рдкрд░)

# 8. Remote repo рд╕реЗ connect рдХрд░реЛ
git remote add origin https://github.com/username/myproject.git

# 9. Main branch set рдХрд░реЛ
git branch -M main

# 10. Code GitHub рдкрд░ push рдХрд░реЛ
git push -u origin main



================================= 2. Branch ==============================================
# 1. Branch list рджреЗрдЦрдирд╛
git branch

# 2. рдирдИ branch рдмрдирд╛рдирд╛
git branch feature1

# 3. рдЙрд╕ branch рдкрд░ switch рдХрд░рдирд╛
git checkout feature1

# (Shortcut: branch рдмрдирд╛рдирд╛ + switch рдХрд░рдирд╛ рдПрдХ рд╕рд╛рде)
git checkout -b feature2

# 4. рдлрд╛рдЗрд▓ add рдХрд░рдХреЗ commit рдХрд░рдирд╛ (branch рдореЗрдВ рдХрд╛рдо рдХрд░реЛ)
echo "This is feature work" > feature.txt
git add feature.txt
git commit -m "Added feature.txt in feature branch"

# 5. Branch рдХреЛ GitHub рдкрд░ push рдХрд░рдирд╛
git push -u origin feature1

# 6. рд╡рд╛рдкрд╕ main branch рдкрд░ рдЖрдирд╛
git checkout main

# 7. feature1 branch рдХреЛ main рдореЗрдВ merge рдХрд░рдирд╛
git merge feature1

# 7.1 Merge result рдХреЛ GitHub рдкрд░ push рдХрд░рдирд╛ (important)
git push origin main

# 8. Branch delete рдХрд░рдирд╛ (local)
git branch -d feature1

# 9. Branch delete рдХрд░рдирд╛ (remote/GitHub)
git push origin --delete feature1

ЁЯФ╣ 3. рдЕрдЧрд░ рджреЛрдиреЛрдВ рдЬрдЧрд╣ рд╕реЗ рд╣рдЯрд╛рдирд╛ рд╣реИ
рддреЛ рдкрд╣рд▓реЗ local delete рдХрд░реЛ рдФрд░ рдлрд┐рд░ remote delete:
git branch -d branch_name
git push origin --delete branch_name

====================================== Veri IMP ===============================
==================== (Untracked Files) VS (Modified Tracked Files) ============

## ЁЯФ╣ Case 1: **Untracked Files** (рдирдИ рдлрд╛рдЗрд▓реЗрдВ, `git add` рдпрд╛ `commit` рдирд╣реАрдВ рдХрд┐рдпрд╛)

* Git рдХреЛ рдЗрдирдХреА рдХреЛрдИ history рдирд╣реАрдВ рдкрддрд╛ред
* рдпреЗ рд╕рд┐рд░реНрдл рдЖрдкрдХреЗ working directory рдореЗрдВ рдкрдбрд╝реА рд╣реИрдВред
* рдЗрд╕рд▓рд┐рдП рдЖрдк рдЖрд╕рд╛рдиреА рд╕реЗ branch рдмрджрд▓ рд╕рдХрддреЗ рд╣реЛ (`git checkout branch_name`)ред
* Branch change рдХрд░рдиреЗ рд╕реЗ untracked files рд╡рд╣реАрдВ рд░рд╣ рдЬрд╛рддреА рд╣реИрдВ (рдХреНрдпреЛрдВрдХрд┐ рд╡реЛ рдХрд┐рд╕реА branch рд╕реЗ рдЬреБрдбрд╝реА рд╣реА рдирд╣реАрдВ рд╣реИрдВ)ред

ЁЯСЙ Example:

echo "hello" > new.txt   # untracked file
git checkout master      # allowed

## ЁЯФ╣ Case 2: **Modified Tracked Files** (рдлрд╛рдЗрд▓реЗрдВ рдЬреЛ рдкрд╣рд▓реЗ рд╕реЗ Git рдореЗрдВ рд╣реИрдВ, рдкрд░ рдЕрднреА рдмрджрд▓реА рдЧрдИ рд╣реИрдВ)
* Git рдХреЛ рдкрддрд╛ рд╣реИ рдпреЗ рдХрд┐рд╕ commit рд╕реЗ belong рдХрд░рддреА рд╣реИрдВред
* рдЕрдЧрд░ рдЖрдк branch рдмрджрд▓рддреЗ рд╣реЛ рдФрд░ рджреВрд╕рд░реА branch рдореЗрдВ рдЙрд╕реА file рдХрд╛ рдЕрд▓рдЧ version рд╣реИ тЖТ рддреЛ conflict/overwrite рд╣реЛ рд╕рдХрддрд╛ рд╣реИред
* рдЗрд╕реАрд▓рд┐рдП Git **allow рдирд╣реАрдВ рдХрд░рддрд╛** рдЬрдм рддрдХ:

  1. рдЖрдк changes commit рди рдХрд░ рджреЛ,
  2. рдпрд╛ stash рди рдХрд░ рджреЛ,
  3. рдпрд╛ discard рди рдХрд░ рджреЛред

-------------------------------- 2. stash ---------------------------------------------
# 1. рдХрд╛рдо рдХрд┐рдпрд╛ (file update рдХреА)
echo "update" >> notes.txt

# 2. Changes рдХреЛ stash рдХрд░реЛ (рд╕рд┐рд░реНрдл tracked files)
git stash

# 3. Untracked files рднреА stash рдХрд░рдиреА рд╣реЛрдВ
git stash -u

# 4. Untracked + Ignored files рднреА stash рдХрд░рдиреА рд╣реЛрдВ
git stash -a

# 5. Custom message рдХреЗ рд╕рд╛рде stash рдХрд░реЛ
git stash push -m "WIP: notes.txt update"

# 6. Stash list рджреЗрдЦреЛ
git stash list

# 7. рдХрд┐рд╕реА stash рдХрд╛ detail рджреЗрдЦреЛ (overview)
git stash show stash@{0}

# 8. рдХрд┐рд╕реА stash рдХрд╛ рдкреВрд░рд╛ diff рджреЗрдЦреЛ
git stash show -p stash@{0}

# 9. Latest stash рд╡рд╛рдкрд╕ рд▓рд╛рдУ (stash list рдореЗрдВ рд░рд╣реЗрдЧрд╛)
git stash apply

# 10. Specific stash рд╡рд╛рдкрд╕ рд▓рд╛рдУ
git stash apply stash@{2}

# 11. Latest stash рд╡рд╛рдкрд╕ рд▓рд╛рдУ + stash рд╣рдЯрд╛рдУ
git stash pop

# 12. Specific stash рд╡рд╛рдкрд╕ рд▓рд╛рдУ + stash рд╣рдЯрд╛рдУ
git stash pop stash@{1}

# 13. рдХрд┐рд╕реА рдПрдХ stash рдХреЛ рд╣рдЯрд╛рдУ
git stash drop stash@{0}

# 14. рд╕рд╛рд░реЗ stashes clear рдХрд░ рджреЛ
git stash clear

IMP for stash
Note:- 
1. git stash clear рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?
рдпреЗ рдЖрдкрдХреЗ рд╕рд╛рд░реЗ stashes delete рдХрд░ рджреЗрддрд╛ рд╣реИред
рдорддрд▓рдм рдЬреЛ рднреА changes рдЖрдкрдиреЗ stash рдХрд░рдХреЗ рд░рдЦреЗ рдереЗ, рд╡реЛ рдЕрдм Git рдореЗрдВ рдХрд╣реАрдВ save рдирд╣реАрдВ рд░рд╣реЗрдВрдЧреЗред
рдЕрдЧрд░ рдЖрдкрдиреЗ рдЙрдиреНрд╣реЗрдВ рдкрд╣рд▓реЗ apply/pop рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИ тЖТ рддреЛ рд╡реЛ changes рд╣рдореЗрд╢рд╛ рдХреЗ рд▓рд┐рдП рдЧрд╛рдпрдм рд╣реЛ рдЬрд╛рдПрдБрдЧреЗред

2. рдХрд┐рд╕реА рднреА branch рдореЗрдВ рдЬрд╛рдХрд░ рдЙрд╕реЗ apply рдпрд╛ pop рдХрд░ рд╕рдХрддреЗ рд╣реЛред
рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ Stash?
рдЬрдм рдЖрдк git stash рдЪрд▓рд╛рддреЗ рд╣реЛ, Git рдЖрдкрдХреЗ current working directory changes рдХреЛ рдПрдХ special рдЬрдЧрд╣ (.git/refs/stash) рдореЗрдВ save рдХрд░ рджреЗрддрд╛ рд╣реИред
рдпрд╣ stash рдХрд┐рд╕реА branch рд╕реЗ permanent рдЬреБрдбрд╝рд╛ рдирд╣реАрдВ рд╣реЛрддрд╛ред
рдЗрд╕рд▓рд┐рдП рдЖрдк рдХрд┐рд╕реА рднреА branch рдореЗрдВ рдЬрд╛рдХрд░ рдЙрд╕реЗ apply рдпрд╛ pop рдХрд░ рд╕рдХрддреЗ рд╣реЛред

ЁЯУТ Git Stash (рдЬрдм 1 рд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ stash рд╣реЛрдВ)
# 1. рдХреЛрдИ change рдХрд░реЛ рдФрд░ stash рдХрд░реЛ
git stash -m "first change"

# 2. рджреВрд╕рд░рд╛ change рдХрд░реЛ рдФрд░ рдлрд┐рд░ stash рдХрд░реЛ
git stash -m "second change"

# 3. рджреЗрдЦреЛ рдЕрднреА stash list рдореЗрдВ рдХреНрдпрд╛ рд╣реИ
git stash list
# Output:
# stash@{0}: On main: second change
# stash@{1}: On main: first change

# 4. Latest stash (stash@{0}) рд╡рд╛рдкрд╕ рд▓рд╛рдУ рдФрд░ list рд╕реЗ рд╣рдЯрд╛ рджреЛ
git stash pop
# тЖТ рд╕рд┐рд░реНрдл "second change" рд╡рд╛рдкрд╕ рдЖрдПрдЧрд╛

# 5. рдлрд┐рд░ stash list рджреЗрдЦреЛ
git stash list
# Output:
# stash@{0}: On main: first change

# 6. рдЕрдм рдкреБрд░рд╛рдирд╛ рд╡рд╛рд▓рд╛ stash рдирд┐рдХрд╛рд▓реЛ
git stash pop stash@{0}
# тЖТ рдЕрдм "first change" рднреА рд╡рд╛рдкрд╕ рдЖ рдЬрд╛рдПрдЧрд╛


================================= 3. Basic тЬЕ conflict рдФрд░ тЭМ no conflict ==============================================
# ЁЯУТ Git Merge Notes (With & Without Conflict)
## ЁЯФ╣ Case 1: Merge **without conflict**

### Flow:
1. рдЙрд╕ branch рдкрд░ рдЬрд╛рдУ рдЬрд┐рд╕рдореЗрдВ merge рдХрд░рдирд╛ рд╣реИ
   git checkout main

2. Merge рдХрд░реЛ
   git merge feature

   ЁЯСЙ рдЕрдЧрд░ changes рдЕрд▓рдЧ-рдЕрд▓рдЧ рдЬрдЧрд╣ рд╣реИрдВ, рддреЛ Git рдЕрдкрдиреЗ рдЖрдк merge рдХрд░ рджреЗрдЧрд╛ред
   * рдХрднреА **fast-forward merge** рд╣реЛрдЧрд╛ (pointer рд╕рд┐рд░реНрдл рдЖрдЧреЗ рдмрдврд╝реЗрдЧрд╛)ред
   * рдХрднреА **auto merge commit** рд╣реЛрдЧрд╛ (Git рдЦреБрдж commit рдмрдирд╛ рджреЗрдЧрд╛)ред

3. Remote рдкрд░ push рдХрд░реЛ
   git push origin main

тЬЕ Done (рдХреЛрдИ manual commit рдХрд░рдиреЗ рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ)ред

## ЁЯФ╣ Case 2: Merge **with conflict**
### Flow:
1. рдЙрд╕ branch рдкрд░ рдЬрд╛рдУ рдЬрд┐рд╕рдореЗрдВ merge рдХрд░рдирд╛ рд╣реИ
   git checkout main

2. Merge рдХрд░реЛ
   git merge feature

   ЁЯСЙ Git error рджреЗрдЧрд╛:
   CONFLICT (content): Merge conflict in notes.txt
   Automatic merge failed; fix conflicts and then commit the result.

3. Conflict рд╡рд╛рд▓реА files open рдХрд░реЛ (markers рд╣реЛрдВрдЧреЗ):
   <<<<<<< HEAD
   main branch ka content
   =======
   feature branch ka content
   >>>>>>> feature

4. File рдХреЛ manually resolve рдХрд░реЛ рдФрд░ save рдХрд░ рджреЛред

5. Resolve mark рдХрд░реЛ

   git add notes.txt

6. Merge commit complete рдХрд░реЛ
   git commit

7. Remote рдкрд░ push рдХрд░реЛ
   git push origin main
тЬЕ Done (рдЕрдм GitHub рдкрд░ рднреА merge рджрд┐рдЦреЗрдЧрд╛)ред

# ЁЯФ╣ Golden Rule (Summary)
| Condition         | Steps                                                                |
| ----------------- | -------------------------------------------------------------------- |
| **No Conflict**   | `checkout` тЖТ `merge` тЖТ `push`                                        |
| **With Conflict** | `checkout` тЖТ `merge` тЖТ **resolve files** тЖТ `add` тЖТ `commit` тЖТ `push` |


ЁЯУТ Git Merge with Multiple Conflicts (Complete Flow)
# 1. рдЙрд╕ branch рдкрд░ рдЬрд╛рдУ рдЬрд┐рд╕рдореЗрдВ merge рдХрд░рдирд╛ рд╣реИ
git checkout main

# 2. рджреВрд╕рд░реА branch рдХреЛ merge рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЛ
git merge feature

# (рдЕрдЧрд░ multiple files рдореЗрдВ conflict рдЖрдпрд╛ рддреЛ Git рдмрддрд╛рдПрдЧрд╛:
# CONFLICT (content): Merge conflict in file1.txt
# CONFLICT (content): Merge conflict in file2.txt
# Automatic merge failed; fix conflicts and then commit the result.)

# 3. рд╣рд░ conflict рд╡рд╛рд▓реА file рдЦреЛрд▓реЛ, markers resolve рдХрд░реЛ рдФрд░ save рдХрд░реЛ
# <<<<<<< HEAD
# main branch ka code
# =======
# feature branch ka code
# >>>>>>> feature

# 4. Resolve рдХреА рд╣реБрдИ files рдХреЛ stage рдХрд░реЛ
git add file1.txt
git add file2.txt
# рдпрд╛ shortcut:
git add .

# 5. Merge commit рдкреВрд░рд╛ рдХрд░реЛ
git commit

# 6. Remote repo (GitHub) рдкрд░ merge result push рдХрд░реЛ
git push origin main


============================= 4. Reset ==============================================

## ЁЯФ╣ Git Reset
`git reset` command рд╕реЗ рдЖрдк рдЕрдкрдиреЗ **HEAD (current commit pointer)** рдХреЛ рдкреАрдЫреЗ рд▓реЗ рдЬрд╛рддреЗ рд╣реИрдВред
рдорддрд▓рдм: Git history рд╕реЗ commit рд╣рдЯ рд╕рдХрддрд╛ рд╣реИ рдпрд╛ рд╕рд┐рд░реНрдл pointer рдкреАрдЫреЗ рдЬрд╛рдПрдЧрд╛ (mode рдкрд░ depend рдХрд░рддрд╛ рд╣реИ)ред

Reset рдХреЗ рддреАрди modes рд╣реИрдВ:
### 1. **--soft reset**

* HEAD рдХреЛ рдкреАрдЫреЗ рд▓реЗ рдЬрд╛рдПрдЧрд╛
* Staging area (index) рдФрд░ Working directory **рдЬреИрд╕реЗ рдХрд╛ рддреИрд╕рд╛** рд░рд╣реЗрдЧрд╛
* рдорддрд▓рдм commit undo рд╣реЛ рдЬрд╛рдПрдЧрд╛, рд▓реЗрдХрд┐рди changes рдЕрднреА рднреА staged рд░рд╣реЗрдВрдЧреЗ

ЁЯСЙ Example:
git reset --soft HEAD~1

рдпрд╣ last commit рд╣рдЯрд╛рдПрдЧрд╛, рд▓реЗрдХрд┐рди рдЙрд╕рдХреЗ рд╕рд╛рд░реЗ changes staging area (git add рд╡рд╛рд▓реЗ area) рдореЗрдВ рд░рд╣реЗрдВрдЧреЗред
тЮб Useful рдЬрдм рдЖрдкрдиреЗ commit рддреЛ рдХрд░ рджрд┐рдпрд╛, рд▓реЗрдХрд┐рди message рдпрд╛ рдХреБрдЫ рдЧрд▓рддреА рд╣реИ, рдФрд░ рдмрд╕ рджреЛрдмрд╛рд░рд╛ commit рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реЛред

### 2. **--mixed reset (default)**
* HEAD рдкреАрдЫреЗ рдЬрд╛рдПрдЧрд╛
* Staging area рдЦрд╛рд▓реА рд╣реЛ рдЬрд╛рдПрдЧрд╛
* Working directory safe рд░рд╣реЗрдЧреА
* рдорддрд▓рдм commit рд╣рдЯреЗрдЧрд╛ рдФрд░ changes unstaged рд╣реЛ рдЬрд╛рдПрдБрдЧреЗ

ЁЯСЙ Example:

git reset HEAD~1

рдпрд╣ last commit рд╣рдЯрд╛рдПрдЧрд╛, рдФрд░ рдЙрд╕рдХреЗ changes рд╡рд╛рдкрд╕ working directory (unstaged) рдореЗрдВ рдЖ рдЬрд╛рдПрдБрдЧреЗред
тЮб Useful рдЬрдм commit рднреА рдЧрд▓рдд рд╣реИ рдФрд░ рд╕рд╛рде рд╣реА staging рднреА рд╣рдЯрд╛рдиреА рд╣реИред

### 3. **--hard reset**

* HEAD рдкреАрдЫреЗ рдЬрд╛рдПрдЧрд╛
* Staging area рднреА рд╕рд╛рдлрд╝
* Working directory рднреА рд╕рд╛рдлрд╝
* рдорддрд▓рдм commit + changes рджреЛрдиреЛрдВ delete рд╣реЛ рдЬрд╛рдПрдБрдЧреЗ

git reset --hard HEAD~1

рдпрд╣ last commit рднреА delete рдХрд░реЗрдЧрд╛ рдФрд░ рдЙрд╕ commit рдХреЗ рд╕рд╛рд░реЗ changes рднреА рдорд┐рдЯрд╛ рджреЗрдЧрд╛ред
тЮб Dangerous! рдХреНрдпреЛрдВрдХрд┐ data рдЦреЛ рд╕рдХрддрд╛ рд╣реИ (рдЬрдм рддрдХ reflog рд╕реЗ recover рди рдХрд░реЛ)ред

| Mode      | Commit рд╣рдЯреЗрдЧрд╛ | Staging area  | Working directory |
| --------- | ------------ | ------------- | ----------------- |
| `--soft`  | рд╣рд╛рдБ          | Safe (staged) | Safe              |
| `--mixed` | рд╣рд╛рдБ          | Clear         | Safe              |
| `--hard`  | рд╣рд╛рдБ          | Clear         | Clear (delete)    |

* **--soft** тЖТ Commit рд╣рдЯреЗрдЧрд╛, changes **staging area + working directory** рдореЗрдВ рд░рд╣реЗрдВрдЧреЗред
* **--mixed (default)** тЖТ Commit рд╣рдЯреЗрдЧрд╛, changes **staging рд╕реЗ рд╣рдЯ рдЬрд╛рдПрдВрдЧреЗ, working directory рдореЗрдВ рд░рд╣реЗрдВрдЧреЗред**
* **--hard** тЖТ Commit рд╣рдЯреЗрдЧрд╛, changes **staging рдФрд░ working directory рджреЛрдиреЛрдВ рд╕реЗ рд╣рдЯ рдЬрд╛рдПрдВрдЧреЗред**


============================= 5. Revert ==============================================

# ЁЯУШ Git Revert Notes

* рдХрд┐рд╕реА commit рдХреЗ changes рдХреЛ undo рдХрд░рддрд╛ рд╣реИред
* Commit **delete рдирд╣реАрдВ рд╣реЛрддрд╛**, рдмрд▓реНрдХрд┐ рдПрдХ **рдирдпрд╛ commit** рдмрдирддрд╛ рд╣реИ рдЬреЛ рдЙрд╕ commit рдХреЛ рдЙрд▓реНрдЯрд╛ рдХрд░ рджреЗрддрд╛ рд╣реИред
* History safe рд░рд╣рддреА рд╣реИ (team work рдХреЗ рд▓рд┐рдП best)ред

## ЁЯФ╣ Steps
1. **Commit рджреЗрдЦреЗрдВ**
   git log --oneline

   Example:
   c3d2f1  add reset concept
   b2a1e9  add paragraph
   a1b2c3  add heading

2. **Commit revert рдХрд░реЗрдВ**
   git revert c3d2f1

3. **Commit Message** (auto-generate рд╣реЛрдЧрд╛)
   Revert "add reset concept"
   This reverts commit c3d2f1...
   * Save рдФрд░ exit рдХрд░реЗрдВ
   * рдпрд╛ custom message рд▓рд┐рдЦреЗрдВ

4. **History рджреЛрдмрд╛рд░рд╛ рджреЗрдЦреЗрдВ**
   git log --oneline

   Result:
   d4e5f6  Revert "add reset concept"
   c3d2f1  add reset concept
   b2a1e9  add paragraph
   a1b2c3  add heading

5. **Remote рдкрд░ push рдХрд░реЗрдВ**
   git push origin master

## ЁЯФ╣ Key Points
* **Reset** commit delete рдХрд░рддрд╛ рд╣реИ тЖТ history рдмрджрд▓реЗрдЧреА тЭМ
* **Revert** commit рдХреЛ delete рдирд╣реАрдВ рдХрд░рддрд╛ тЖТ рдирдпрд╛ commit рдЬреЛрдбрд╝рддрд╛ рд╣реИ тЬЕ
* Safe option рд╣реИ рдЬрдм рдЖрдк team рдореЗрдВ рдХрд╛рдо рдХрд░ рд░рд╣реЗ рд╣реЛрдВред